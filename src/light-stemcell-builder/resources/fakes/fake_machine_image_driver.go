// This file was generated by counterfeiter
package fakes

import (
	"light-stemcell-builder/resources"
	"sync"
)

type FakeMachineImageDriver struct {
	CreateStub        func(resources.MachineImageDriverConfig) (resources.MachineImage, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 resources.MachineImageDriverConfig
	}
	createReturns struct {
		result1 resources.MachineImage
		result2 error
	}
}

func (fake *FakeMachineImageDriver) Create(arg1 resources.MachineImageDriverConfig) (resources.MachineImage, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 resources.MachineImageDriverConfig
	}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeMachineImageDriver) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeMachineImageDriver) CreateArgsForCall(i int) resources.MachineImageDriverConfig {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeMachineImageDriver) CreateReturns(result1 resources.MachineImage, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 resources.MachineImage
		result2 error
	}{result1, result2}
}

var _ resources.MachineImageDriver = new(FakeMachineImageDriver)
