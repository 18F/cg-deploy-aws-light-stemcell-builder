// This file was generated by counterfeiter
package fakes

import (
	"light-stemcell-builder/ec2"
	"light-stemcell-builder/ec2/ec2ami"
	"light-stemcell-builder/ec2/ec2instance"
	"sync"
)

type FakeAWS struct {
	ConfigureStub        func(c ec2.Config)
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		c ec2.Config
	}
	GetConfigStub        func() ec2.Config
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct{}
	getConfigReturns     struct {
		result1 ec2.Config
	}
	ImportVolumeStub        func(imagePath string) (string, error)
	importVolumeMutex       sync.RWMutex
	importVolumeArgsForCall []struct {
		imagePath string
	}
	importVolumeReturns struct {
		result1 string
		result2 error
	}
	ResumeImportStub        func(taskID string, imagePath string) error
	resumeImportMutex       sync.RWMutex
	resumeImportArgsForCall []struct {
		taskID    string
		imagePath string
	}
	resumeImportReturns struct {
		result1 error
	}
	DeleteVolumeStub        func(volumeID string) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		volumeID string
	}
	deleteVolumeReturns struct {
		result1 error
	}
	DeleteDiskImageStub        func(taskID string) error
	deleteDiskImageMutex       sync.RWMutex
	deleteDiskImageArgsForCall []struct {
		taskID string
	}
	deleteDiskImageReturns struct {
		result1 error
	}
	DescribeConversionTaskStub        func(taskResource ec2.StatusResource) (ec2.StatusInfo, error)
	describeConversionTaskMutex       sync.RWMutex
	describeConversionTaskArgsForCall []struct {
		taskResource ec2.StatusResource
	}
	describeConversionTaskReturns struct {
		result1 ec2.StatusInfo
		result2 error
	}
	DescribeVolumeStub        func(volumeResource ec2.StatusResource) (ec2.StatusInfo, error)
	describeVolumeMutex       sync.RWMutex
	describeVolumeArgsForCall []struct {
		volumeResource ec2.StatusResource
	}
	describeVolumeReturns struct {
		result1 ec2.StatusInfo
		result2 error
	}
	DescribeImageStub        func(amiResource ec2.StatusResource) (ec2.StatusInfo, error)
	describeImageMutex       sync.RWMutex
	describeImageArgsForCall []struct {
		amiResource ec2.StatusResource
	}
	describeImageReturns struct {
		result1 ec2.StatusInfo
		result2 error
	}
	DescribeSnapshotStub        func(snapshotResource ec2.StatusResource) (ec2.StatusInfo, error)
	describeSnapshotMutex       sync.RWMutex
	describeSnapshotArgsForCall []struct {
		snapshotResource ec2.StatusResource
	}
	describeSnapshotReturns struct {
		result1 ec2.StatusInfo
		result2 error
	}
	RegisterImageStub        func(amiConfig ec2ami.Config, snapshotID string) (string, error)
	registerImageMutex       sync.RWMutex
	registerImageArgsForCall []struct {
		amiConfig  ec2ami.Config
		snapshotID string
	}
	registerImageReturns struct {
		result1 string
		result2 error
	}
	CopyImageStub        func(amiConfig ec2ami.Config, destination string) (string, error)
	copyImageMutex       sync.RWMutex
	copyImageArgsForCall []struct {
		amiConfig   ec2ami.Config
		destination string
	}
	copyImageReturns struct {
		result1 string
		result2 error
	}
	MakeImagePublicStub        func(amiConfig ec2ami.Config) error
	makeImagePublicMutex       sync.RWMutex
	makeImagePublicArgsForCall []struct {
		amiConfig ec2ami.Config
	}
	makeImagePublicReturns struct {
		result1 error
	}
	DeregisterImageStub        func(amiConfig ec2ami.Config) error
	deregisterImageMutex       sync.RWMutex
	deregisterImageArgsForCall []struct {
		amiConfig ec2ami.Config
	}
	deregisterImageReturns struct {
		result1 error
	}
	CreateSnapshotStub        func(volumeID string) (string, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		volumeID string
	}
	createSnapshotReturns struct {
		result1 string
		result2 error
	}
	DeleteSnapshotStub        func(snapshotID string, region string) error
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		snapshotID string
		region     string
	}
	deleteSnapshotReturns struct {
		result1 error
	}
	RunInstanceStub        func(config ec2instance.Config) (ec2instance.Info, error)
	runInstanceMutex       sync.RWMutex
	runInstanceArgsForCall []struct {
		config ec2instance.Config
	}
	runInstanceReturns struct {
		result1 ec2instance.Info
		result2 error
	}
	DescribeInstanceStub        func(instance ec2.StatusResource) (ec2.StatusInfo, error)
	describeInstanceMutex       sync.RWMutex
	describeInstanceArgsForCall []struct {
		instance ec2.StatusResource
	}
	describeInstanceReturns struct {
		result1 ec2.StatusInfo
		result2 error
	}
	TerminateInstanceStub        func(instance ec2instance.Info) error
	terminateInstanceMutex       sync.RWMutex
	terminateInstanceArgsForCall []struct {
		instance ec2instance.Info
	}
	terminateInstanceReturns struct {
		result1 error
	}
}

func (fake *FakeAWS) Configure(c ec2.Config) {
	fake.configureMutex.Lock()
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		c ec2.Config
	}{c})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		fake.ConfigureStub(c)
	}
}

func (fake *FakeAWS) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *FakeAWS) ConfigureArgsForCall(i int) ec2.Config {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return fake.configureArgsForCall[i].c
}

func (fake *FakeAWS) GetConfig() ec2.Config {
	fake.getConfigMutex.Lock()
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct{}{})
	fake.getConfigMutex.Unlock()
	if fake.GetConfigStub != nil {
		return fake.GetConfigStub()
	} else {
		return fake.getConfigReturns.result1
	}
}

func (fake *FakeAWS) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeAWS) GetConfigReturns(result1 ec2.Config) {
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 ec2.Config
	}{result1}
}

func (fake *FakeAWS) ImportVolume(imagePath string) (string, error) {
	fake.importVolumeMutex.Lock()
	fake.importVolumeArgsForCall = append(fake.importVolumeArgsForCall, struct {
		imagePath string
	}{imagePath})
	fake.importVolumeMutex.Unlock()
	if fake.ImportVolumeStub != nil {
		return fake.ImportVolumeStub(imagePath)
	} else {
		return fake.importVolumeReturns.result1, fake.importVolumeReturns.result2
	}
}

func (fake *FakeAWS) ImportVolumeCallCount() int {
	fake.importVolumeMutex.RLock()
	defer fake.importVolumeMutex.RUnlock()
	return len(fake.importVolumeArgsForCall)
}

func (fake *FakeAWS) ImportVolumeArgsForCall(i int) string {
	fake.importVolumeMutex.RLock()
	defer fake.importVolumeMutex.RUnlock()
	return fake.importVolumeArgsForCall[i].imagePath
}

func (fake *FakeAWS) ImportVolumeReturns(result1 string, result2 error) {
	fake.ImportVolumeStub = nil
	fake.importVolumeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) ResumeImport(taskID string, imagePath string) error {
	fake.resumeImportMutex.Lock()
	fake.resumeImportArgsForCall = append(fake.resumeImportArgsForCall, struct {
		taskID    string
		imagePath string
	}{taskID, imagePath})
	fake.resumeImportMutex.Unlock()
	if fake.ResumeImportStub != nil {
		return fake.ResumeImportStub(taskID, imagePath)
	} else {
		return fake.resumeImportReturns.result1
	}
}

func (fake *FakeAWS) ResumeImportCallCount() int {
	fake.resumeImportMutex.RLock()
	defer fake.resumeImportMutex.RUnlock()
	return len(fake.resumeImportArgsForCall)
}

func (fake *FakeAWS) ResumeImportArgsForCall(i int) (string, string) {
	fake.resumeImportMutex.RLock()
	defer fake.resumeImportMutex.RUnlock()
	return fake.resumeImportArgsForCall[i].taskID, fake.resumeImportArgsForCall[i].imagePath
}

func (fake *FakeAWS) ResumeImportReturns(result1 error) {
	fake.ResumeImportStub = nil
	fake.resumeImportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) DeleteVolume(volumeID string) error {
	fake.deleteVolumeMutex.Lock()
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		volumeID string
	}{volumeID})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(volumeID)
	} else {
		return fake.deleteVolumeReturns.result1
	}
}

func (fake *FakeAWS) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeAWS) DeleteVolumeArgsForCall(i int) string {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return fake.deleteVolumeArgsForCall[i].volumeID
}

func (fake *FakeAWS) DeleteVolumeReturns(result1 error) {
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) DeleteDiskImage(taskID string) error {
	fake.deleteDiskImageMutex.Lock()
	fake.deleteDiskImageArgsForCall = append(fake.deleteDiskImageArgsForCall, struct {
		taskID string
	}{taskID})
	fake.deleteDiskImageMutex.Unlock()
	if fake.DeleteDiskImageStub != nil {
		return fake.DeleteDiskImageStub(taskID)
	} else {
		return fake.deleteDiskImageReturns.result1
	}
}

func (fake *FakeAWS) DeleteDiskImageCallCount() int {
	fake.deleteDiskImageMutex.RLock()
	defer fake.deleteDiskImageMutex.RUnlock()
	return len(fake.deleteDiskImageArgsForCall)
}

func (fake *FakeAWS) DeleteDiskImageArgsForCall(i int) string {
	fake.deleteDiskImageMutex.RLock()
	defer fake.deleteDiskImageMutex.RUnlock()
	return fake.deleteDiskImageArgsForCall[i].taskID
}

func (fake *FakeAWS) DeleteDiskImageReturns(result1 error) {
	fake.DeleteDiskImageStub = nil
	fake.deleteDiskImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) DescribeConversionTask(taskResource ec2.StatusResource) (ec2.StatusInfo, error) {
	fake.describeConversionTaskMutex.Lock()
	fake.describeConversionTaskArgsForCall = append(fake.describeConversionTaskArgsForCall, struct {
		taskResource ec2.StatusResource
	}{taskResource})
	fake.describeConversionTaskMutex.Unlock()
	if fake.DescribeConversionTaskStub != nil {
		return fake.DescribeConversionTaskStub(taskResource)
	} else {
		return fake.describeConversionTaskReturns.result1, fake.describeConversionTaskReturns.result2
	}
}

func (fake *FakeAWS) DescribeConversionTaskCallCount() int {
	fake.describeConversionTaskMutex.RLock()
	defer fake.describeConversionTaskMutex.RUnlock()
	return len(fake.describeConversionTaskArgsForCall)
}

func (fake *FakeAWS) DescribeConversionTaskArgsForCall(i int) ec2.StatusResource {
	fake.describeConversionTaskMutex.RLock()
	defer fake.describeConversionTaskMutex.RUnlock()
	return fake.describeConversionTaskArgsForCall[i].taskResource
}

func (fake *FakeAWS) DescribeConversionTaskReturns(result1 ec2.StatusInfo, result2 error) {
	fake.DescribeConversionTaskStub = nil
	fake.describeConversionTaskReturns = struct {
		result1 ec2.StatusInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) DescribeVolume(volumeResource ec2.StatusResource) (ec2.StatusInfo, error) {
	fake.describeVolumeMutex.Lock()
	fake.describeVolumeArgsForCall = append(fake.describeVolumeArgsForCall, struct {
		volumeResource ec2.StatusResource
	}{volumeResource})
	fake.describeVolumeMutex.Unlock()
	if fake.DescribeVolumeStub != nil {
		return fake.DescribeVolumeStub(volumeResource)
	} else {
		return fake.describeVolumeReturns.result1, fake.describeVolumeReturns.result2
	}
}

func (fake *FakeAWS) DescribeVolumeCallCount() int {
	fake.describeVolumeMutex.RLock()
	defer fake.describeVolumeMutex.RUnlock()
	return len(fake.describeVolumeArgsForCall)
}

func (fake *FakeAWS) DescribeVolumeArgsForCall(i int) ec2.StatusResource {
	fake.describeVolumeMutex.RLock()
	defer fake.describeVolumeMutex.RUnlock()
	return fake.describeVolumeArgsForCall[i].volumeResource
}

func (fake *FakeAWS) DescribeVolumeReturns(result1 ec2.StatusInfo, result2 error) {
	fake.DescribeVolumeStub = nil
	fake.describeVolumeReturns = struct {
		result1 ec2.StatusInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) DescribeImage(amiResource ec2.StatusResource) (ec2.StatusInfo, error) {
	fake.describeImageMutex.Lock()
	fake.describeImageArgsForCall = append(fake.describeImageArgsForCall, struct {
		amiResource ec2.StatusResource
	}{amiResource})
	fake.describeImageMutex.Unlock()
	if fake.DescribeImageStub != nil {
		return fake.DescribeImageStub(amiResource)
	} else {
		return fake.describeImageReturns.result1, fake.describeImageReturns.result2
	}
}

func (fake *FakeAWS) DescribeImageCallCount() int {
	fake.describeImageMutex.RLock()
	defer fake.describeImageMutex.RUnlock()
	return len(fake.describeImageArgsForCall)
}

func (fake *FakeAWS) DescribeImageArgsForCall(i int) ec2.StatusResource {
	fake.describeImageMutex.RLock()
	defer fake.describeImageMutex.RUnlock()
	return fake.describeImageArgsForCall[i].amiResource
}

func (fake *FakeAWS) DescribeImageReturns(result1 ec2.StatusInfo, result2 error) {
	fake.DescribeImageStub = nil
	fake.describeImageReturns = struct {
		result1 ec2.StatusInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) DescribeSnapshot(snapshotResource ec2.StatusResource) (ec2.StatusInfo, error) {
	fake.describeSnapshotMutex.Lock()
	fake.describeSnapshotArgsForCall = append(fake.describeSnapshotArgsForCall, struct {
		snapshotResource ec2.StatusResource
	}{snapshotResource})
	fake.describeSnapshotMutex.Unlock()
	if fake.DescribeSnapshotStub != nil {
		return fake.DescribeSnapshotStub(snapshotResource)
	} else {
		return fake.describeSnapshotReturns.result1, fake.describeSnapshotReturns.result2
	}
}

func (fake *FakeAWS) DescribeSnapshotCallCount() int {
	fake.describeSnapshotMutex.RLock()
	defer fake.describeSnapshotMutex.RUnlock()
	return len(fake.describeSnapshotArgsForCall)
}

func (fake *FakeAWS) DescribeSnapshotArgsForCall(i int) ec2.StatusResource {
	fake.describeSnapshotMutex.RLock()
	defer fake.describeSnapshotMutex.RUnlock()
	return fake.describeSnapshotArgsForCall[i].snapshotResource
}

func (fake *FakeAWS) DescribeSnapshotReturns(result1 ec2.StatusInfo, result2 error) {
	fake.DescribeSnapshotStub = nil
	fake.describeSnapshotReturns = struct {
		result1 ec2.StatusInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) RegisterImage(amiConfig ec2ami.Config, snapshotID string) (string, error) {
	fake.registerImageMutex.Lock()
	fake.registerImageArgsForCall = append(fake.registerImageArgsForCall, struct {
		amiConfig  ec2ami.Config
		snapshotID string
	}{amiConfig, snapshotID})
	fake.registerImageMutex.Unlock()
	if fake.RegisterImageStub != nil {
		return fake.RegisterImageStub(amiConfig, snapshotID)
	} else {
		return fake.registerImageReturns.result1, fake.registerImageReturns.result2
	}
}

func (fake *FakeAWS) RegisterImageCallCount() int {
	fake.registerImageMutex.RLock()
	defer fake.registerImageMutex.RUnlock()
	return len(fake.registerImageArgsForCall)
}

func (fake *FakeAWS) RegisterImageArgsForCall(i int) (ec2ami.Config, string) {
	fake.registerImageMutex.RLock()
	defer fake.registerImageMutex.RUnlock()
	return fake.registerImageArgsForCall[i].amiConfig, fake.registerImageArgsForCall[i].snapshotID
}

func (fake *FakeAWS) RegisterImageReturns(result1 string, result2 error) {
	fake.RegisterImageStub = nil
	fake.registerImageReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) CopyImage(amiConfig ec2ami.Config, destination string) (string, error) {
	fake.copyImageMutex.Lock()
	fake.copyImageArgsForCall = append(fake.copyImageArgsForCall, struct {
		amiConfig   ec2ami.Config
		destination string
	}{amiConfig, destination})
	fake.copyImageMutex.Unlock()
	if fake.CopyImageStub != nil {
		return fake.CopyImageStub(amiConfig, destination)
	} else {
		return fake.copyImageReturns.result1, fake.copyImageReturns.result2
	}
}

func (fake *FakeAWS) CopyImageCallCount() int {
	fake.copyImageMutex.RLock()
	defer fake.copyImageMutex.RUnlock()
	return len(fake.copyImageArgsForCall)
}

func (fake *FakeAWS) CopyImageArgsForCall(i int) (ec2ami.Config, string) {
	fake.copyImageMutex.RLock()
	defer fake.copyImageMutex.RUnlock()
	return fake.copyImageArgsForCall[i].amiConfig, fake.copyImageArgsForCall[i].destination
}

func (fake *FakeAWS) CopyImageReturns(result1 string, result2 error) {
	fake.CopyImageStub = nil
	fake.copyImageReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) MakeImagePublic(amiConfig ec2ami.Config) error {
	fake.makeImagePublicMutex.Lock()
	fake.makeImagePublicArgsForCall = append(fake.makeImagePublicArgsForCall, struct {
		amiConfig ec2ami.Config
	}{amiConfig})
	fake.makeImagePublicMutex.Unlock()
	if fake.MakeImagePublicStub != nil {
		return fake.MakeImagePublicStub(amiConfig)
	} else {
		return fake.makeImagePublicReturns.result1
	}
}

func (fake *FakeAWS) MakeImagePublicCallCount() int {
	fake.makeImagePublicMutex.RLock()
	defer fake.makeImagePublicMutex.RUnlock()
	return len(fake.makeImagePublicArgsForCall)
}

func (fake *FakeAWS) MakeImagePublicArgsForCall(i int) ec2ami.Config {
	fake.makeImagePublicMutex.RLock()
	defer fake.makeImagePublicMutex.RUnlock()
	return fake.makeImagePublicArgsForCall[i].amiConfig
}

func (fake *FakeAWS) MakeImagePublicReturns(result1 error) {
	fake.MakeImagePublicStub = nil
	fake.makeImagePublicReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) DeregisterImage(amiConfig ec2ami.Config) error {
	fake.deregisterImageMutex.Lock()
	fake.deregisterImageArgsForCall = append(fake.deregisterImageArgsForCall, struct {
		amiConfig ec2ami.Config
	}{amiConfig})
	fake.deregisterImageMutex.Unlock()
	if fake.DeregisterImageStub != nil {
		return fake.DeregisterImageStub(amiConfig)
	} else {
		return fake.deregisterImageReturns.result1
	}
}

func (fake *FakeAWS) DeregisterImageCallCount() int {
	fake.deregisterImageMutex.RLock()
	defer fake.deregisterImageMutex.RUnlock()
	return len(fake.deregisterImageArgsForCall)
}

func (fake *FakeAWS) DeregisterImageArgsForCall(i int) ec2ami.Config {
	fake.deregisterImageMutex.RLock()
	defer fake.deregisterImageMutex.RUnlock()
	return fake.deregisterImageArgsForCall[i].amiConfig
}

func (fake *FakeAWS) DeregisterImageReturns(result1 error) {
	fake.DeregisterImageStub = nil
	fake.deregisterImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) CreateSnapshot(volumeID string) (string, error) {
	fake.createSnapshotMutex.Lock()
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		volumeID string
	}{volumeID})
	fake.createSnapshotMutex.Unlock()
	if fake.CreateSnapshotStub != nil {
		return fake.CreateSnapshotStub(volumeID)
	} else {
		return fake.createSnapshotReturns.result1, fake.createSnapshotReturns.result2
	}
}

func (fake *FakeAWS) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeAWS) CreateSnapshotArgsForCall(i int) string {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return fake.createSnapshotArgsForCall[i].volumeID
}

func (fake *FakeAWS) CreateSnapshotReturns(result1 string, result2 error) {
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) DeleteSnapshot(snapshotID string, region string) error {
	fake.deleteSnapshotMutex.Lock()
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		snapshotID string
		region     string
	}{snapshotID, region})
	fake.deleteSnapshotMutex.Unlock()
	if fake.DeleteSnapshotStub != nil {
		return fake.DeleteSnapshotStub(snapshotID, region)
	} else {
		return fake.deleteSnapshotReturns.result1
	}
}

func (fake *FakeAWS) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeAWS) DeleteSnapshotArgsForCall(i int) (string, string) {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return fake.deleteSnapshotArgsForCall[i].snapshotID, fake.deleteSnapshotArgsForCall[i].region
}

func (fake *FakeAWS) DeleteSnapshotReturns(result1 error) {
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWS) RunInstance(config ec2instance.Config) (ec2instance.Info, error) {
	fake.runInstanceMutex.Lock()
	fake.runInstanceArgsForCall = append(fake.runInstanceArgsForCall, struct {
		config ec2instance.Config
	}{config})
	fake.runInstanceMutex.Unlock()
	if fake.RunInstanceStub != nil {
		return fake.RunInstanceStub(config)
	} else {
		return fake.runInstanceReturns.result1, fake.runInstanceReturns.result2
	}
}

func (fake *FakeAWS) RunInstanceCallCount() int {
	fake.runInstanceMutex.RLock()
	defer fake.runInstanceMutex.RUnlock()
	return len(fake.runInstanceArgsForCall)
}

func (fake *FakeAWS) RunInstanceArgsForCall(i int) ec2instance.Config {
	fake.runInstanceMutex.RLock()
	defer fake.runInstanceMutex.RUnlock()
	return fake.runInstanceArgsForCall[i].config
}

func (fake *FakeAWS) RunInstanceReturns(result1 ec2instance.Info, result2 error) {
	fake.RunInstanceStub = nil
	fake.runInstanceReturns = struct {
		result1 ec2instance.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) DescribeInstance(instance ec2.StatusResource) (ec2.StatusInfo, error) {
	fake.describeInstanceMutex.Lock()
	fake.describeInstanceArgsForCall = append(fake.describeInstanceArgsForCall, struct {
		instance ec2.StatusResource
	}{instance})
	fake.describeInstanceMutex.Unlock()
	if fake.DescribeInstanceStub != nil {
		return fake.DescribeInstanceStub(instance)
	} else {
		return fake.describeInstanceReturns.result1, fake.describeInstanceReturns.result2
	}
}

func (fake *FakeAWS) DescribeInstanceCallCount() int {
	fake.describeInstanceMutex.RLock()
	defer fake.describeInstanceMutex.RUnlock()
	return len(fake.describeInstanceArgsForCall)
}

func (fake *FakeAWS) DescribeInstanceArgsForCall(i int) ec2.StatusResource {
	fake.describeInstanceMutex.RLock()
	defer fake.describeInstanceMutex.RUnlock()
	return fake.describeInstanceArgsForCall[i].instance
}

func (fake *FakeAWS) DescribeInstanceReturns(result1 ec2.StatusInfo, result2 error) {
	fake.DescribeInstanceStub = nil
	fake.describeInstanceReturns = struct {
		result1 ec2.StatusInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAWS) TerminateInstance(instance ec2instance.Info) error {
	fake.terminateInstanceMutex.Lock()
	fake.terminateInstanceArgsForCall = append(fake.terminateInstanceArgsForCall, struct {
		instance ec2instance.Info
	}{instance})
	fake.terminateInstanceMutex.Unlock()
	if fake.TerminateInstanceStub != nil {
		return fake.TerminateInstanceStub(instance)
	} else {
		return fake.terminateInstanceReturns.result1
	}
}

func (fake *FakeAWS) TerminateInstanceCallCount() int {
	fake.terminateInstanceMutex.RLock()
	defer fake.terminateInstanceMutex.RUnlock()
	return len(fake.terminateInstanceArgsForCall)
}

func (fake *FakeAWS) TerminateInstanceArgsForCall(i int) ec2instance.Info {
	fake.terminateInstanceMutex.RLock()
	defer fake.terminateInstanceMutex.RUnlock()
	return fake.terminateInstanceArgsForCall[i].instance
}

func (fake *FakeAWS) TerminateInstanceReturns(result1 error) {
	fake.TerminateInstanceStub = nil
	fake.terminateInstanceReturns = struct {
		result1 error
	}{result1}
}

var _ ec2.AWS = new(FakeAWS)
